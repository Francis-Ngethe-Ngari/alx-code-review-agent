import { writeFileSync, mkdirSync } from 'node:fs';
import { join } from 'node:path';

export interface ReviewFeedback {
  summary: string;
  strengths: string[];
  issues: string[];
  suggestions: string[];
  metadata?: {
    reviewedAt: string;
    directory: string;
    reviewer: string;
  };
}

function formatReview(feedback: ReviewFeedback): string {
  const metadata = feedback.metadata;
  
  return `# Code Review

${metadata ? `**Reviewed:** ${metadata.reviewedAt}  
**Directory:** ${metadata.directory}  
**Reviewer:** ${metadata.reviewer}

---

` : ''}## Summary
${feedback.summary}

## Strengths
${feedback.strengths.map((s) => `- ${s}`).join('\n')}

## Issues
${feedback.issues.map((i) => `- ${i}`).join('\n')}

## Suggestions
${feedback.suggestions.map((s) => `- ${s}`).join('\n')}

---
*Generated by my-agent AI Code Review*
`;
}

export function saveReview(
  feedback: ReviewFeedback, 
  filename?: string,
  outputDir = './reviews',
): string {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const defaultFilename = `review-${timestamp}.md`;
  const finalFilename = filename || defaultFilename;
  const fullPath = join(outputDir, finalFilename);

  // Ensure reviews directory exists
  try {
    mkdirSync(outputDir, { recursive: true });
  } catch (err) {
    // Directory might already exist
  }

  const markdown = formatReview(feedback);
  writeFileSync(fullPath, markdown, { encoding: 'utf8' });
  console.log(`âœ… Review saved to ${fullPath}`);
  
  return fullPath;
}

// CLI usage when run directly
if (require.main === module) {
  const demo: ReviewFeedback = {
    summary: 'The code is functional but lacks sufficient test coverage.',
    strengths: ['Clear function naming', 'Good modular design'],
    issues: ['Missing input validation', 'No unit tests for edge cases'],
    suggestions: [
      'Add input validation for user data',
      'Introduce Jest tests for error handling',
    ],
    metadata: {
      reviewedAt: new Date().toISOString(),
      directory: './demo',
      reviewer: 'AI Agent',
    },
  };

  saveReview(demo);
}